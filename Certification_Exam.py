# """
# Задача 1. PC Store
# Винету искал да си купи няколко части за неговия компютър и отишъл в магазин. Понеже там нямало частите в наличност, те
# трябвали да ги поръчат онлайн, но от чуждестранен сайт. Той трябвало да си купи процесор, видео карта и рам памет, като
# за процесора и видео картата сайтът му правел няколко процента отстъпка. Всичко трябвало да плати в долари, затова
# трябва цените да се обърнат в лева, като приемем, че 1 долар = 1.57 лева.
# Да се напише програма, която пресмята колко общо пари ще му трябват в лева, за да може да си закупи частите.
# Вход:
# От конзолата се прочитат 5 числа:
# •	На първи ред цена в долари за процесора – реално число в интервала [200.00 … 3000.00]
# •	На втори ред цена в долари за видео карта – реално число в интервала [100.00 … 1500.00]
# •	На трети ред цена в долари за една платка рам памет – реално число в интервала [80.00 ... 500.00]
# •	На четвърти ред брой платки рам памет – цяло число в интервала [1 ... 4]
# •   На пети ред отстъпка – процент в интервала [0.01 … 0.1]
# Изход:
# Да се отпечата на конзолата на един ред:
# •   Колко общо лева ще му трябват, за да си закупи частите.
# •	"Money needed - {общо лева} leva."
# Сумата трябва да се форматира до втория знак след десетичната запетая.
# """
#
# cpu = float(input())
# gpu = float(input())
# ram = float(input())
# n_ram = int(input())
# discount = float(input())
# discountables_lv = (cpu + gpu) * 1.57
# discount_lv = discountables_lv * discount
# price_lv = (cpu + gpu + ram*n_ram) * 1.57
# price_lv -= discount_lv
#
# print(f"Money needed - {price_lv:.2f} leva.")


# """
# Задача 2. Illidan
# Ники решава да събере група от хора, за да може да победят последния най-силен опонент в играта Илидън.
# Той иска предварително да разбере, дали ще могат да го победят, като му помогнете да изчислите общата сила с която
# разполагат той и останалите хора от групата.
# Да се напише програма, която пресмята общата сила на вскички хора в групата, след това да се провери дали ще могат да
# победят Илидън.
# Вход:
# От конзолата се прочитат 3 реда:
# •	На първи ред общ брой хора в групата – цяло число в интервала [5 … 25]
# •	На втори ред силата за един човек от групата – цяло число в интервала [10 … 200]
# •	На трети ред кръвта на Илидън – цяло число в интервала [1000 … 5000]
# Изход:
# Да се отпечата на конзолата:
# •   Ако общата им сила е по-малка от кръвта на Илидън
# -	"You are not prepared! You need {разликата между точките на Илидън и играча} more points."
# •   Ако общата им сила е по-голяма или равна на кръвта на Илидън
# -	"Illidan has been slain! You defeated him with {разликата между точките на играча и Илидън} points."
# """
#
# players = int(input())
# gear_score = int(input())
# illidan_hp = int(input())
# total_gs = players * gear_score
# if total_gs < illidan_hp:
#     print(f"You are not prepared! You need {illidan_hp - total_gs} more points.")
# else:
#     print(f"Illidan has been slain! You defeated him with {total_gs - illidan_hp} points.")


# """
# Задача 3. Аквапарк
# Престой в най-престижния вътрешен аквапарк на света се таксува различно, в зависимост от частта от денонощието, както и
# времето от годината, в които посещаваш аквапарка. Цените са:
# 	Март до Май	    Юни до Август
# Ден	10.50/ч	        12.60/ч
# Нощ	8.4/ч	        10.20/ч
# Предлагат се и следните отстъпки в следната последователност:
# 1.	За група от 4 или повече човека, цената на човек се намалява с 10%.
# 2.	При 5 или повече часа прекарани, цената се намалява с 50% на човек.
# Вход:
# Входът се чете от конзолата и съдържа точно 4 реда:
# •	На първия ред е месецът ("march", "april", "may", "june", "july", "august ")
# •	На втория ред е броят на прекараните - часове цяло число в интервала [0…100]
# •	На третия ред е броят на хората в групата - цяло число в интервала [0…100]
# •	На четвъртия ред е времето от деня ("day" или "night")
#
# Изход:
# Да се отпечатат на конзолата 2 реда:
# •	На първия ред: "Price per person for one hour: {цена на човек на час}"
# •	На втория ред: "Total cost of the visit: {цялата сума}"
#
# Цената да бъде закръглена до втория знак след десетичната запетая.
# """
#
# month = input()
# hours = int(input())
# people = int(input())
# period = input()
#
# mar_may = {
#     "day": 10.50,
#     "night": 8.40
# }
#
# jun_aug = {
#     "day": 12.60,
#     "night": 10.20
# }
#
#
# if month in ["march", "april", "may"]:
#     price = mar_may[period]
# else:
#     price = jun_aug[period]
#
# if people >= 4:
#     price = price * 0.9
# if hours >= 5:
#     price = price * 0.50
#
# total_cost = (price * people) * hours
#
# print(f"Price per person for one hour: {price:.2f}")
# print(f"Total cost of the visit: {total_cost:.2f}")


# """
# Задача 4. Лихва
# Григор спечелва от лото игра сума в размер на S лева. Той решава да ги вложи в банка, която предлага два вида спестовни
# влогове на своите клиенти. Проста лихва при която всеки месец сумата се увеличава с 3% от първоначално вложената, и
# сложна лихва, която начислява 2,7% върху сумата от предходния месец.
# Напишете програма, която по зададени брой месеци и вложена сума пресмята парите, с които Григор ще разполага в края на
# периода при простата и при сложната лихва. Както и кой вид лихва ще бъде по-изгоден за него.
# Вход:
# Входът се чете от конзолата и съдържа 2 реда:
# •	Първоначално вложена сума S – реално положително число [0.01….1000000.00];
# •	Брой месеци за вложението – цяло положително число [1-100];
# Изход:
# На конзолата трябва да се отпечатат 3 реда.
# •	Първи ред – крайна сума, с която би разполагал Григор, ако избере проста лихва:
# "Simple interest rate: {сума при проста лихва} lv."
# •	Втори ред – крайна сума, с която би разполагал Григор, ако избере сложна лихва:
# "Complex interest rate: {сума при сложна лихва} lv."
# •	Трети ред – коя от двете лихви му е по-изгодна и с колко нейната сума е по-голяма:
# "Choose a {вид лихва} interest rate. You will win {разлика между двете лихви} lv."
# Нека всички суми бъдат закръглени до втория знак след десетичната запетая.В задачата няма да има тест, в който двете крайни суми да съвпадат.
# """
#
# money = float(input())
# months = int(input())
#
# simple_interest = money + (money * 0.03) * months
# compound_interest = money
#
# for i in range(months):
#     compound_interest += compound_interest * 0.027
#
# print(f"Simple interest rate: {simple_interest:.2f} lv.")
# print(f"Complex interest rate: {compound_interest:.2f} lv.")  # proper real-life term is compound interest!
#
# if simple_interest > compound_interest:
#     print(f"Choose a simple interest rate. You will win {simple_interest - compound_interest:.2f} lv.")
# else:
#     print(f"Choose a complex interest rate. You will win {compound_interest - simple_interest:.2f} lv.")


# """
# Задача 5. Еверест
# Атанас е алпинист, чиято следваща цел е изкачването на Еверест. Вашата задача е да напишете програма
# която да следи до каква височина е достигнал Атанас и за колко дни е изкачил върха. Той започва изкачването си от ден 
# първи от базов лагер, който е на 5 364 метра, асамият връх е на 8 848м. 
# Преди всяко изкачване на определени метри, Атанас може да си почине в някой лагер и да продължи на следващия ден или да 
# продължи изкачването без да спре, като максималното време,в което той може да изкачва върха е 5дни.
# Програмата приключва при получаване на командата "END", придостигане на върха(8 848м) или при превишаване на разрешените
# 5дни за изкачване.
# Вход
# От конзолата се четат по два реда до въвеждане на команда"END", ако саминали повече от 5дни в изкачване или се достигне 
# върха(8 848м):
# "Yes" / "No" -текст -Дали Атанас ще нощува преди изкачването на следващите метри или не
# Изкачени метри -цяло число в интервала [1...4000]
# Изход
# След получаване на командата "END",превишаване на разрешениете 5 дни за изкачване или се достигне върха (8 848м),
# на конзолата се печата:
# Ако Атанас е изкачил Еверест:
# "Goal reached for{брой дни които Атанас е изкачвал върха}days!"
# Ако Атанас не е изкачил Еверест:
# "Failed!""{достигнатите от Атанас метри}
# """
#
# current_height = 5364
# day = 1
# target = 8848
#
# while current_height < target and day < 6:
#     sleep = input()
#
#     if sleep == "Yes":
#         day += 1
#     if sleep == "END":
#         break
#
#     progress = int(input())
#     if day < 6:
#         current_height += progress
#
# if current_height >= target:
#     print(f"Goal reached for {day} days!")
# else:
#     print("Failed!")
#     print(current_height)
#


# """
# Задача 6. Смени
# Любимият отборна Пепие на финал, но тръгва да губимача. Треньорътна отборане знае какви смени да направи,
# за да обърне резултата. Напишете програма, с която ще разберете кой са първите 6смени, които могат да се направят.
# Знаем, че всяка цифра от двата номера е в даден интервал.За да бъде възможна една смяна,първото число от номера трябва
# да бъде четно, а второто нечетно.ВходОт конзолата се четат:
# •K -началото на интервала за първото число от първия номер – цифра в интервала [0..8]
# •L-началото на интервала за второто число от първия номер – цифра в интервала [9..0]
# •M-началото на интервала за първото число от втория номер – цифра в интервала [0..8]
# •N-началото на интервала за второто число от втория номер – цифра в интервала [9..0]
# Изход
# На конзолата да се отпечататпървите 6възможнисменипо следния начин :
# •Ако смянатае възможна и номерата не съвпадат,да се отпечата:"{K}{L} -{M}{N}"
# •Ако смяната е възможна и номерата съвпадат, да се отпечата:"Cannot change the same player.
# """
# 
# 
# k = int(input())
# l = int(input())
# m = int(input())
# n = int(input())
# 
# valid_changes = 0
# 
# for num1_1 in range(k, 9+1):
#     for num1_2 in range(9, l-1, -1):
#         for num2_1 in range(m, 9+1):
#             for num2_2 in range(9, n-1, -1):
#                 if valid_changes != 6:
#                     first = str(num1_1) + str(num1_2)
#                     second = str(num2_1) + str(num2_2)
#                     #print(first, second)
#                     if (int(first[0]) % 2 == 0 and int(first[1]) % 2 != 0) and (int(second[0]) % 2 == 0 and int(second[1]) % 2 != 0):
#                         if first != second:
#                             print(f"{num1_1}{num1_2} - {num2_1}{num2_2}")
#                             valid_changes += 1
#                         else:
#                             print("Cannot change the same player.")